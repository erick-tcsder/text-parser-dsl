
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CLOSED_BRACKET DPIN DPOUT EQUALS GREATER ID NUMBER OPEN_BRACKET SEMICOLON TYPEprogram : statement_liststatement_list : statement_list statement SEMICOLON \n                      | emptystatement : variable_def\n  \t             | input\n                 | outputvariable_def : type ID EQUALS expressiontype : TYPE\n            | TYPE OPEN_BRACKET CLOSED_BRACKETempty : input : DPIN GREATER GREATER IDoutput : ID GREATER GREATER DPOUTexpression : ID\n                  | NUMBER'
    
_lr_action_items = {'DPIN':([0,2,3,12,],[-10,10,-3,-2,]),'ID':([0,2,3,8,11,12,17,19,20,],[-10,9,-3,13,-8,-2,21,25,-9,]),'TYPE':([0,2,3,12,],[-10,11,-3,-2,]),'$end':([0,1,2,3,12,],[-10,0,-1,-3,-2,]),'SEMICOLON':([4,5,6,7,21,22,23,24,25,],[12,-4,-5,-6,-13,-7,-14,-12,-11,]),'GREATER':([9,10,14,15,],[14,15,18,19,]),'OPEN_BRACKET':([11,],[16,]),'EQUALS':([13,],[17,]),'CLOSED_BRACKET':([16,],[20,]),'NUMBER':([17,],[23,]),'DPOUT':([18,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'empty':([0,],[3,]),'statement':([2,],[4,]),'variable_def':([2,],[5,]),'input':([2,],[6,]),'output':([2,],[7,]),'type':([2,],[8,]),'expression':([17,],[22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',9),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list','parser.py',14),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',15),
  ('statement -> variable_def','statement',1,'p_statement','parser.py',29),
  ('statement -> input','statement',1,'p_statement','parser.py',30),
  ('statement -> output','statement',1,'p_statement','parser.py',31),
  ('variable_def -> type ID EQUALS expression','variable_def',4,'p_variable','parser.py',36),
  ('type -> TYPE','type',1,'p_type','parser.py',45),
  ('type -> TYPE OPEN_BRACKET CLOSED_BRACKET','type',3,'p_type','parser.py',46),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',55),
  ('input -> DPIN GREATER GREATER ID','input',4,'p_input','parser.py',59),
  ('output -> ID GREATER GREATER DPOUT','output',4,'p_output','parser.py',66),
  ('expression -> ID','expression',1,'p_expression','parser.py',73),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',74),
]
