Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement SEMICOLON
Rule 3     statement_list -> empty
Rule 4     statement -> variable_def
Rule 5     statement -> input
Rule 6     statement -> output
Rule 7     variable_def -> type ID EQUALS expression
Rule 8     type -> TYPE
Rule 9     type -> TYPE OPEN_BRACKET CLOSED_BRACKET
Rule 10    empty -> <empty>
Rule 11    input -> DPIN GREATER GREATER ID
Rule 12    output -> ID GREATER GREATER DPOUT
Rule 13    expression -> ID
Rule 14    expression -> NUMBER

Terminals, with rules where they appear

CLOSED_BRACKET       : 9
DPIN                 : 11
DPOUT                : 12
EQUALS               : 7
GREATER              : 11 11 12 12
ID                   : 7 11 12 13
NUMBER               : 14
OPEN_BRACKET         : 9
SEMICOLON            : 2
TYPE                 : 8 9
error                : 

Nonterminals, with rules where they appear

empty                : 3
expression           : 7
input                : 5
output               : 6
program              : 0
statement            : 2
statement_list       : 1 2
type                 : 7
variable_def         : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (10) empty -> .

    DPIN            reduce using rule 10 (empty -> .)
    ID              reduce using rule 10 (empty -> .)
    TYPE            reduce using rule 10 (empty -> .)
    $end            reduce using rule 10 (empty -> .)

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . variable_def
    (5) statement -> . input
    (6) statement -> . output
    (7) variable_def -> . type ID EQUALS expression
    (11) input -> . DPIN GREATER GREATER ID
    (12) output -> . ID GREATER GREATER DPOUT
    (8) type -> . TYPE
    (9) type -> . TYPE OPEN_BRACKET CLOSED_BRACKET

    $end            reduce using rule 1 (program -> statement_list .)
    DPIN            shift and go to state 10
    ID              shift and go to state 9
    TYPE            shift and go to state 11

    statement                      shift and go to state 4
    variable_def                   shift and go to state 5
    input                          shift and go to state 6
    output                         shift and go to state 7
    type                           shift and go to state 8

state 3

    (3) statement_list -> empty .

    DPIN            reduce using rule 3 (statement_list -> empty .)
    ID              reduce using rule 3 (statement_list -> empty .)
    TYPE            reduce using rule 3 (statement_list -> empty .)
    $end            reduce using rule 3 (statement_list -> empty .)


state 4

    (2) statement_list -> statement_list statement . SEMICOLON

    SEMICOLON       shift and go to state 12


state 5

    (4) statement -> variable_def .

    SEMICOLON       reduce using rule 4 (statement -> variable_def .)


state 6

    (5) statement -> input .

    SEMICOLON       reduce using rule 5 (statement -> input .)


state 7

    (6) statement -> output .

    SEMICOLON       reduce using rule 6 (statement -> output .)


state 8

    (7) variable_def -> type . ID EQUALS expression

    ID              shift and go to state 13


state 9

    (12) output -> ID . GREATER GREATER DPOUT

    GREATER         shift and go to state 14


state 10

    (11) input -> DPIN . GREATER GREATER ID

    GREATER         shift and go to state 15


state 11

    (8) type -> TYPE .
    (9) type -> TYPE . OPEN_BRACKET CLOSED_BRACKET

    ID              reduce using rule 8 (type -> TYPE .)
    OPEN_BRACKET    shift and go to state 16


state 12

    (2) statement_list -> statement_list statement SEMICOLON .

    DPIN            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    ID              reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    TYPE            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    $end            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)


state 13

    (7) variable_def -> type ID . EQUALS expression

    EQUALS          shift and go to state 17


state 14

    (12) output -> ID GREATER . GREATER DPOUT

    GREATER         shift and go to state 18


state 15

    (11) input -> DPIN GREATER . GREATER ID

    GREATER         shift and go to state 19


state 16

    (9) type -> TYPE OPEN_BRACKET . CLOSED_BRACKET

    CLOSED_BRACKET  shift and go to state 20


state 17

    (7) variable_def -> type ID EQUALS . expression
    (13) expression -> . ID
    (14) expression -> . NUMBER

    ID              shift and go to state 21
    NUMBER          shift and go to state 23

    expression                     shift and go to state 22

state 18

    (12) output -> ID GREATER GREATER . DPOUT

    DPOUT           shift and go to state 24


state 19

    (11) input -> DPIN GREATER GREATER . ID

    ID              shift and go to state 25


state 20

    (9) type -> TYPE OPEN_BRACKET CLOSED_BRACKET .

    ID              reduce using rule 9 (type -> TYPE OPEN_BRACKET CLOSED_BRACKET .)


state 21

    (13) expression -> ID .

    SEMICOLON       reduce using rule 13 (expression -> ID .)


state 22

    (7) variable_def -> type ID EQUALS expression .

    SEMICOLON       reduce using rule 7 (variable_def -> type ID EQUALS expression .)


state 23

    (14) expression -> NUMBER .

    SEMICOLON       reduce using rule 14 (expression -> NUMBER .)


state 24

    (12) output -> ID GREATER GREATER DPOUT .

    SEMICOLON       reduce using rule 12 (output -> ID GREATER GREATER DPOUT .)


state 25

    (11) input -> DPIN GREATER GREATER ID .

    SEMICOLON       reduce using rule 11 (input -> DPIN GREATER GREATER ID .)

